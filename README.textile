h1. EM::RemoteCall

EM::RemoteCall provides an Eventmachine server/client couple which allows the client to call methods within the server process. Local callbacks and errbacks on the client are supported, yielding the value of the server callback.

h2. Overview

h3. Method declaration

* @.remote_method@ - a local (client) instance method
* @.remote_class_method@ - a local class method

h3. Arguments

* @:server_class_method@ [boolean] - is the method a class method on the server?
* @:debug@ [boolean] - putses some debug statements
* @:calls@ [method name] - which method to call on the server

h3. Method types:

|*method declaration*                               |*client*       |*server*       |
|@remote_method :foo@                               |instance method|instance method|
|@remote_method :faz, :server_class_method => true@ |instance method|class method   |
|@remote_class_method :baz@                         |class method   |class method   |

h3. Server side return values

* method takes a block: the values yielded to the block are returned the client (async)
* method returns a EM::Deferrable: the outcome of the deferrable is returned to the client (async)
* neither nor: the return value is returned to the client (sync)

Note: Wether or not a method takes a block can only be determined on ruby 1.9 and only if the block is explicitly in the signature. Most of the time this is the case in typical EM asynchronous methods as these blocks are passed around. So if you want your server method act asynchronously please be explicit in the signature of the method or - better yet - use EM:Deferrables.

h3. Client side return values

Unless usual RPC libraries em_remote_call methods don't just return values. To fit into the Eventmachine landscape they are either called with a block or a callback is defined on the deferrable they return. The return value of the remote execution is passed as argument into the block:

<pre><code>ClientClass.foo do |result|
  puts "server returned #{result}"
end
</code></pre>

or

<pre><code>call = ClientClass.foo
call.callback{ |result|
  puts "server returned #{result}"
}
</code></pre>

The later has the advantage that you can define an errback, a block wich is use in case of an error:

<pre><code>call = ClientClass.foo
call.callback{ |result| puts "server returned #{result}" }
call.errback { |error| puts "server errored: #{error}" }
</code></pre>

This brings us to…

h3. Server side errors

Errors on the server side are only handled in two cases:

* The server method returns a EM:Deferrable. Then the usual errback is used.
* The happens synchronously when parsing the call and calling the method.

In case an error occurs asynchronously we can't get hold of the error and return it to the client.

Errors are returned as error classes (as string) and the error message.

h2. By example

h3. Class methods (explaining example/class_methods.rb)

We have a class on the server:

<pre><code>class ServerClass
  def self.foo(&blk)
    EM.add_timer 1 do # do some work...
      blk.call 42     # then return
    end
  end
end
</code></pre>

and a corresponding class on the client:

<pre><code>class ClientClass
  has_em_remote_class 'ServerClass', :socket => '/tmp/foo'
  remote_class_method :foo
end
</code></pre>

Let's start the server:

<pre><code>EM.run do
  EM::RemoteCall::Server.start_at '/tmp/foo'
end
</code></pre>

and the client:

<pre><code>EM.run do
  ClientClass.foo do |result|
    puts "server returned #{result}"
  end
end
</code></pre>

h3. Instance methods (explaining example/instance_methods.rb)

For instance methods to work we have to identify the instances on the server side. This _always_ works via the corresponding instance on the client side. Server side instances are _never_ identified explicitly. (This is why the combination _client side class method_ - _server side instance method_ is missing in the _method types_ table above.

To accomplish the identification of the server side instances, the :instance_finder parameter is used. By default it's the @#id@ method, but it can be anything else:

<pre><code>has_em_remote_class 'ServerClass', :socket => '/tmp/foo', :instance_finder => :name
</code></pre>

The simple example/instance_methods.rb doesn't go that fancy, it just uses the default @#id@ defined in the common parent class:

<pre><code>class CommmonClass
  attr_reader :id
  def initialize(id)
    @id = id
  end
end
class ServerClass < CommmonClass
  is_a_collection
  
  def foo(&blk)
    EM.add_timer 1 do           # do some work...
      blk.call "#{id} says 42"  # then return
    end
  end
end

class ClientClass < CommmonClass
  has_em_remote_class 'ServerClass', :socket => TEST_SOCKET
  remote_method :foo
end
</code></pre>

Let's start the server:

<pre><code>EM.run do
  ServerClass.new 23
  EM::RemoteCall::Server.start_at TEST_SOCKET
end
</code></pre>

… and the client:

<pre><code>EM.run do
  c = ClientClass.new 23
  c.foo do |result|
    puts "server returned '#{result}'"
    EM.stop
  end
end
</code></pre>

Note that the corresponding instances are created before doing the actual method call. Obviously it's pretty pointless to manually generate all the instances on client and server side beforehand.

Let's rectify this…

h3. Instance methods & class methods (explaining example/instance_methods2.rb)

Here, we're adding another instance @#new_on_server@ method to the client, calling the class method @#new@ on the server:

<pre><code>remote_method :new_on_server, :calls => :new, :server_class_method => true</code></pre>

The complete client class:

<pre><code>class ClientClass < CommmonClass
  def initialize(id)
    new_on_server id
    super
  end
  
  has_em_remote_class 'ServerClass', :socket => TEST_SOCKET
  remote_method :new_on_server, :calls => :new, :server_class_method => true
  remote_method :foo#, :debug => true
end
</code></pre>

Our new @#new_on_server@ method is called in the clients initialize method to generate the corresponding server instance every time a client instance is made.

h2. Mashing it all together (explaining example/advanced.rb)

h3. Common Track class

Say we have an ordinary Track class:

<pre><code>class Track
  attr_reader :title, :artist

  def initialize(opts)
    @title, @artist = opts[:title], opts[:artist]

    puts "new track: #{title} - #{artist} (#{self.class})"
    super
  end

  def id
    "#{title} - #{artist}"
  end
end
</code></pre>

This class contains the similar functionality on the server and the client. Note the definition of the @#id@ method. It serves as an identifier for tracks on the client and the server.

h3. ServerTrack class

The server adds a @#play@ method to the class:

<pre><code>class ServerTrack < Track
  is_a_collection

  def play(timer=3, &callb)
    puts "playing: #{id} (for #{timer} seconds...)"

    EM.add_timer timer do
      callb.call "finished #{id}"
    end
  end
end
</code></pre>

Note the use of the is_a_collection gem. It provides a #find method and by default it does the lookup via the @#id@ method (that's why we defined this above, remember?). Also note that there is no remote call specific code here. In this regards the server is completely agnostic of it being used by the client.

h3. ClientTrack class

This is the enhancement of the Track class on the client side:

<pre><code>class ClientTrack < Track
  def initialize(opts)
    super
    init_track_on_server :title => title, :artist => artist
  end

  extend EM::RemoteCall
  remote_method :init_track_on_server, :class_name => 'ServerTrack', :calls => :new
  remote_method :play,                 :class_name => 'ServerTrack', :find_by => :id
end
</code></pre>

Here, we're specifying the remote methods. It illustrates two cases:

* @#init_track_on_server@ doesn't specify a :find_by parameter. @#init_track_on_server@ is a instance method on the client, but call the @#new@ class method on the server.
* @#play@ specifies a :find_by parameter, therefor it's an instance method on the server, too.

Note that on initialization of a ClientTrack we initialize a ServerTrack on the server, too.

The reactor code for the server simply looks like this:

h3. Running the server

<pre><code>EM.run do
  EM::RemoteCall::Server.start_at /tmp/foo
end
</code></pre>

Nothing to see here. We just start the remote call server.

h3. The client

On the client we then drive the remote server:

<pre><code>EM.run do
  ClientTrack.remote_connection = EM::RemoteCall::Client.connect_to socket

  track_one = ClientTrack.new :title => 'Smells like Teen Spirit', :artist => 'Nirvana'
  track_two = ClientTrack.new :title => 'Concrete Schoolyards',    :artist => 'J5'

  EM.add_timer 1 do
    track_one.play(2){|v| puts "finished: #{v}"}
  end

  EM.add_timer 2 do
    track_two.play{ puts "finished J5!" }
  end
end
</code></pre>

First we open the connection to the server, then we initialize two tracks. As stated above: on initialization on the client side the tracks start tu exist on the server side, too. After one second we tell the server to play the first track for 2 seconds and after another second the second (defaults to 3 seconds).

h2. FAQ

* _How do you handle more complex data types as method arguments?_ - I don't. Method arguments and return values have to be serializable to and form JSON. Possible data types are Strings, Numbers, Array, Hashes, Booleans.
* _How do you transport the callback blocks and their bindings over the wire?_ - I don't. Client callbacks stay on the client. They get stored there for later execution.

h2. TODO

* more specs (at the moment there are no unit spec, but just integration specs)
